对于一个优秀的工程架构，需要满足以下软件工程的8个标准：
1. 可靠性，通过拆分和组合逻辑，将相同功能聚成模块，避免相互影响
2. 安全性，封装对外暴露的接口，提供统一和标准的访问方式，增强项目的安全防护
3. 伸缩性，在使用频率和使用人数急剧增加时，维持合理的性能和错误率
4. 定制化，根据不同的市场和变化的需求，增加或减少某些功能，适应环境的变化
5. 扩展性，当底层系统更新和新的接口增加时，支持升级系统，允许导入接口，并且兼容现有功能
6. 维护性，当系统出现错误时，能够得到及时定位与快速反馈，并且易于修复错误
7. 用户体验，给予用户良好的体验，既包括优美的界面，又包括良好的性能
8. 版本迭代，支持不断地调整已有的功能、添加新的功能，在不破坏架构的情况下，满足用户需求

对于一个优秀的工程架构，还需要满足以下面向对象的5个原则，就是经典的SOLID，即：
1. 单一职责原则（Single Responsibility）
2. 开放/关闭原则（Open/Close）,对程序、方法和类，开发扩展或继承，关闭修改
3. 里氏替换原则（Liskov Substitution）
4. 接口分离原则（Interface Segregation），不强制代码依赖于不使用的接口
5. 依赖倒置原则（Dependency Inversion），代码取决于抽象概念，而不是具体实现

困扰大型Android项目的若干棘手问题及解决方法
1. 因未分离视图逻辑与业务逻辑，所导致的逻辑爆炸
2. 版本迭代导致需要修改较多的类，代码隐藏潜在风险
3. 模块之间的高耦合低内聚，相互关联，无法编码测试单元，测试独立功能

三个主流的工程架构：MVC，MVP，MVVM
MVC架构，中文译为模型、视图、控制器，其主要的设计思想基于视图逻辑的修改会多于业务逻辑的修改，当仅仅修改业务逻辑时，不会改变视图逻辑的代码，减少了修改代码导致潜在风险。
MVC架构将工程分为三个部分：数据层（又称模型层），即Model；视图层（又称UI层），即View；逻辑层（又称控制层），即Controller。
1. 数据层：负责管理视图逻辑与业务逻辑，提供网络与数据库的监听和修改接口。
2. 视图层：负责显示来自于数据层的数据，接收用户的交互信息。
3. 逻辑层：根据来自视图层的交互信息，或定时任务，指挥数据层更新数据，或指挥视图层重载数据层的数据。

根据MVC架构，视图层依赖于数据层，逻辑层依赖于视图层和数据层，数据层完全独立。
视图层作为整个架构的窗口，显示数据和接受用户响应事件，根据控制层的指令，被动地显示数据层的数据。
逻辑层（控制层）作为整个架构的大脑，根据来源于视图层的用户响应事件，或定时任务，给数据层发出指令更新数据以及给视图层发出指令重新加载数据。
数据层作为架构的核心，提供数据与更新数据，视图层和逻辑层都会依赖于数据层，视图层的显示来源于数据层的数据，逻辑层也会更新数据层的数据。
最终，数据层完全从项目中解耦，数据层中的视图逻辑与业务逻辑也从项目中独立，不依赖于显示。

数据层支持编写独立的单元测试，测试视图逻辑与业务逻辑的正确性。

逻辑层负责更新数据层的数据，根据更新的方式不同，即主动或被动，MVC架构又分为被动(Passive)模式和主动(Active)模式
被动模式 
Controller		Model		View
handleEvent		
			updateModel
					update
			getData
主动模式
在主动模式中，逻辑层（控制层）不再是唯一指挥视图的类。在数据层中，存在自动更新当前数据状态的观察者（Observer）模块，由此模块通知视图层，获取数据层中更新后的数据，重新加载。
主动模式 通常需要广播机制支持

MVC架构的应用范围
首先：从项目的Activity（或Fragment）中剥离出数据层，即把视图逻辑与业务逻辑独立，编写针对于业务层的单元测试
其次：从项目的Activity（或Fragment）中，再抽取控制逻辑，指挥页面与数据的更新，这就分离出了逻辑层。
最终：在项目的Activity（或Fragment）中，只剩下界面显示相关的逻辑，这样就形成了视图层。
注意：在逻辑层与数据层中的代码，不含有任何显示部分，即不会引用Android的Context类，支持编写不含Android界面的测试单元

4. MVC架构的缺陷
所有架构都不适用于迷你项目，在基于架构分离职责时，必然会引入若干的控制单元，导致类的增多，即设计过度。
但是在大型项目中，良好的项目架构可以避免风险，减少因新增或修改导致的不可控因素，提高项目的稳定性。

业务逻辑和视图逻辑的区别
业务逻辑：问题的发生时间
视图逻辑：2018年10月15日03点55分

在MVC模式中，视图逻辑位于数据层会产生若干问题，视图逻辑是耦合的关键症结，默认由数据层处理，则隐式地依赖于视图层，当视图层修改显示样式时，数据层也需要修改视图逻辑，导致两个模块的耦合度增加；如果改为视图层处理，则单元测试会遗漏这些视图逻辑。

在主动模式中，除了耦合度的问题，还有观察者模块的数量膨胀问题。在数据中，每个小的视图逻辑都需要增加观察者模块，来保证视图层更新顺利地进行。
因为MVC架构未解决业务逻辑与视图逻辑的分离问题，而且对于视图逻辑的处理，一般是增加耦合或者遗漏测试，所以架构师们又设计出MVC架构的进化版MVP（Model View Presenter）架构


3.1.2 MVP架构
MVP架构，中文译为模型、视图、展示，将工程分为3个部分：数据层（又称模型层），即Model；视图层（又称UI层），即View；展示层（又称表示层），即Presenter。
其主要的设计思想是：当数据层传输数据至视图层时，使用展示层在数据上封装视图逻辑，再传递给视图层，再传递给视图层。
相对于MVC架构，MVP架构将视图逻辑从数据层移至展示层，数据层仅仅保留业务逻辑，实现视图逻辑与业务逻辑的分离。

数据层（Model）：负责管理业务逻辑，提供网络与数据库的监听和修改接口
视图层（View）：负责显示来自于展示层的数据，接收用户的交互信息
展示层（Presenter）：负责管理视图逻辑和交互逻辑，根据来自视图层的交互信息或定时任务，指挥数据层更新数据；接收数据层的数据，封装视图逻辑，为视图层提供显示数据

视图层与展示层的关系非常紧密，相互引用，并且一一对应，即每个视图类都会对应一个展示层。视图层将界面显示与用户事件响应封装成接口，供展示层调用；展示层将视图逻辑也封装成接口，供视图层调用。视图层处理Android界面逻辑，展示层处理视图逻辑，视图层使用UI测试，展示层使用单元测试。

为了便于管理和查找，创建视图层和展示层的父接口，用于相互关联，具体接口都继承于父接口，在接口中放入具体方法，再将配对的视图层和展示层的具体接口放置在一个合同类中，表明这一组视图接口与展示接口是一一对应的。
1. MVP架构的数据层
数据层负责获取或存储在远程或本地的数据，操作方式有获取和存储两种；数据来源有远程和本地两种。
一个常见的例子是，当处理数据的显示逻辑时，数据层会有限检索本地数据，如果存在，则直接返回数据；如果不存在，则请求网络数据，完成后同步至本地，再返回数据。
在数据层的构造器中，绑定本地数据源（taskLocalDataSource）与远程数据源（taskRemoteDataSource）两个接口类，无论本地还是远程，都继承于父接口类（TaskDataSource）。数据源的父接口类（TaskDataSource）负责数据源的逻辑，规定若干操作数据源的通用操作；具体的本地或远程接口类负责通用接口的实现。
2. MVP的视图层
视图层与展示层配合使用，显示展示层提供的数据，将用户响应事件反馈至展示层。当分离视图逻辑后，Activity（或Fragment）就是视图层。视图层需要绑定特定的展示层，视图层接口（View）继承于含有展示层接口参数（Presenter）的视图层父接口（BaseView），并提供绑定展示层方法的接口（setPresenter）
... ...
3. MVP架构的展示层
... ...
4. MVP架构的优劣
MVP架构是针对Android项目的设计模式，对于已分离数据层的初级架构项目容易重构，根据每个Activity（或Fragment）创建对应的展示层，将视图逻辑从视图层（入Activity）和数据层中剥离出来，放置于展示层即可。
优：
......
MVP架构有三个致命缺陷：
...
3. 对于相同的视图逻辑，不同的展示层无法共享，都需要包括。
MVP架构的核心在于展示层，打破视图逻辑与业务逻辑之间的耦合，创建数据展示的通道，隔离视图逻辑，支持单元测试。但仍不完美，于是架构师们又设计出MVP的进化版MVVM（Model View ViewModel）架构，来解决MVP架构的问题。

3.1.3 MVVM架构
MVVM架构，中文译为模型、视图、视图模型，将工程分为3个部分：数据层（又称模型层），即Model；视图层（又称UI层），即View；视图数据层，即ViewModel。其主要设计思想与MVP架构类似，都是分离视图逻辑与业务逻辑，两个架构的视图层与数据层相同，不同的是视图数据层（ViewModel）,MVP的展示层抽象出事件处理的接口，MVVM的视图数据层为事件处理提供数据流，相比之下，视图数据层比展示层的粒度更细。
...
...
3)视图数据层：负责管理视图逻辑、交互逻辑，将逻辑分类，管理一类特定的逻辑，与多个视图层绑定，为其提供特定的数据支持与交互处理。
MVVM架构与MVP架构的结构相似，核心目标都是分离显示界面与视图逻辑，但是在实现方式上，两者有如下差异：
1）在MVVM中，视图数据层仅仅提供特定的数据流，相同的数据流可以被多个视图层使用，视图数据层与视图层是弱绑定的关系，即一对多的关系。 
2）在MVVM中，视图数据层独立于视图层，视图层保留数据层的引用。
3）在MVVM中，视图数据层与视图层的关系类似于生产者（视图数据层）和消费者（视图层）的关系。消费者知道生产者，而生产者只负责提供数据，并不关心谁来消费这些数据。
1. MVVM架构的数据层
MVVM广义上包含两个数据层，数据层，又称为纯数据层（DataModel）,与视图数据层区分。数据层通过事件流，提供多种数据源，如网络数据、数据库数据，首选项（Shared Preferences）数据等，并负责全部的业务逻辑。
数据层提供泛化数据的接口，确保业务逻辑的独立完整，可以被多个页面共享和使用，并为视图数据层提供数据。数据层不含有Android的页面代码，支持单元测试。
2. MVVM架构的视图数据层
对于视图数据层而言，与视图层的关联多于数据层，从数据层获取必要的数据，在数据之上封装视图逻辑，为不同的视图层提供完整的展示数据。对于完整而言，主要包括两个方面：
1）视图数据层为视图层提供送所完整状态的数据，不需要任何加工。
2）视图层仅仅负责显示数据，不含有任何视图逻辑与事件处理，这些都交由视图数据层处理。
视图数据层一般使用观察者模式，与DataBinding配合使用，继承观察者模式的基类（BaseObservable）,将视图逻辑的属性用观察者域（ObservableField）表示，当属性发生变化时，更新全部显示属性的界面。
视图数据层在数据层之上封装视图逻辑，并不含有Android界面类，支持单元测试。
数据视图层所绑定的数据层也支持自由替换，比如将线上数据源替换为模拟的测试数据源，验证视图逻辑的可用性。
3. MVVM架构的视图层
视图层负责显示视图数据层的数据，同时通知视图数据层处理用户响应事件，因此，视图层需要绑定数据视图层，调用数据视图层的接口。
4. MVVM架构的优势
1） 在MVVM架构中，视图层与视图数据层的耦合要比MVP中视图层与展示层的耦合度低
2） 视图层仅作为视图数据层的消费者，当修改显示页面时，不需要修改视图数据层。
3） 根据不同的业务组合，创建若干个高内聚模型层，支持视图层共享与替换视图层，实现逻辑的复用。
4） 彻底地分离显示页面与视图逻辑，使用DataBinding模式，将显示页面置于布局中，将视图逻辑置于视图数据层。
5） 视图层与与视图数据层是多对多的关系，视图数据层独立于视图层；视图数据层与数据层是多对多的关系，数据层独立于视图数据层。
6） 在MVVM架构中，视图数据层和数据类，与显示页面完全解耦，不含有任何Android的类，提供了可测试性。

MVC架构作为早期的架构，来源于Java项目，在应用Android项目时，导致视图逻辑无法分离。MVC架构的应用领域主要为大型Java项目，其较少修改视图逻辑，较多修改业务逻辑，主要保证业务逻辑的修改不影响视图逻辑，而对视图逻辑的修改关注较少。
MVP架构是MVC架构基于Android项目的改进，朴素地将已有的Activity（Fragment）拆分成两个层，将视图逻辑与MVC架构的控制层都移入展示层，当修改视图逻辑时，不会影响到数据层，降低模块之间的耦合度，但是导致展示层过于臃肿，同时无法复用一些常用的视图逻辑。
MVVM架构在MVP架构的基础上，进一步解耦，把MVP架构中的视图层与展示层一对一的关系，拆分为视图层与视图数据层的一对多的关系，将含有视图逻辑的视图数据层完全独立出来，使整个项目的架构更加灵活。













